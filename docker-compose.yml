services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/var/www/frontend
      - /var/www/frontend/node_modules
    stdin_open: true
    restart: always
    networks:
      - app_network

  nginx:
    image: nginx:1.27
    container_name: nginx
    depends_on:
      - frontend
    ports:
      - 80:80
      - 3001:3001
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/logs:/var/log/nginx
      - ./frontend/dist:/var/www/frontend/dist
      - uploads:/var/www/backend/storage/app/public:ro
    restart: always
    networks:
      - app_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "9000:9000"
    volumes:
      - ./backend:/var/www/backend
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
    restart: always
    networks:
      - app_network

  mysql:
    image: mysql:5.7
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: mysql
      MYSQL_DATABASE: laraserver
      TZ: 'Asia/Tokyo'
    volumes:
      - db-data:/var/lib/mysql
    restart: always
    networks:
      - app_network

  phpmyadmin:
    image: phpmyadmin
    depends_on:
      - mysql
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOSTS=mysql
      - PMA_USER=root
      - PMA_PASSWORD=mysql
    expose:
      - "80"
    restart: always
    networks:
      - app_network

  jenkins:
    build: ./jenkins
    container_name: jenkins
    ports:
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # JenkinsがDocker制御可能に
    environment:
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
    profiles:
      - prod

networks:
  app_network:
    driver: bridge  # コンテナ間通信用のカスタムネットワーク

volumes:
  db-data:
  uploads: